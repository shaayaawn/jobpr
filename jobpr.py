import streamlit as stimport randomimport pandas as pdclass Warehouse:    def __init__(self, num_products=80, num_orders=50, order_size_range=(1, 5), num_pickers=5, picker_capacity=7):        self.num_products = num_products        self.products = [f'p{i}' for i in range(1, num_products + 1)]        self.layout = self.initialize_layout()        self.order_size_range = order_size_range        self.num_orders = num_orders        self.orders = self.generate_orders()        self.pickers = [{'id': i + 1, 'capacity': picker_capacity} for i in range(num_pickers)]            def initialize_layout(self):        layout_list = []        product_choices = self.products.copy()        random.shuffle(product_choices)         for aisle in [1, 3, 5, 7]:            for y in range(1, 11):                  for side in ['L', 'R']:                      product = product_choices.pop() if product_choices else None                    layout_list.append({'Aisle': aisle, 'Position': y, 'Side': side, 'Product': product})        layout_df = pd.DataFrame(layout_list)        return layout_df    # def get_layout_text(self):    #     layout_text = ""    #     for location, product_id in self.layout.items():    #         block = 'Upper' if location[1] > 5 else 'Lower'    #         layout_text += f"Aisle {location[0]}, Block {block}, Side {location[2]}: Product {product_id}\n"    #     return layout_text        def generate_orders(self):        orders = []        for _ in range(self.num_orders):            order_size = random.randint(*self.order_size_range)              order = random.sample(self.products, order_size)            orders.append(order)        return orders        def dummy_batching(self):        remaining_orders = self.orders.copy()        dummy_batch = []        while remaining_orders:            current_batch = []            current_used_capacity = 0            # We'll use a separate loop index because we need to modify remaining_orders within the loop            i = 0              while i < len(remaining_orders):                order = remaining_orders[i]                if current_used_capacity + len(order) <= 7:  # Picker capacity check                    current_batch.extend(order)                    current_used_capacity += len(order)                    i += 1  # Move to the next order                else:                    break  # Exit the inner loop to process the next batch            # Add the current batch to dummy_batch            dummy_batch.append(current_batch)            # Update remaining orders by removing the orders processed in this batch            remaining_orders = remaining_orders[i:]        return dummy_batch         def main():    st.title("Warehouse Layout Visualization")    warehouse = Warehouse()    st.write(warehouse.orders)    st.write("- -- - -- - - -- - -- - - -")    st.write(warehouse.dummy_batching())    if __name__ == "__main__":    main()